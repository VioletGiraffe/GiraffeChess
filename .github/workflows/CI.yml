name: CI

on: [push, pull_request, workflow_dispatch]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations
      fail-fast: false

      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - uses: seanmiddleditch/gha-setup-ninja@master

    - name: Configure CMake
      if: startsWith(matrix.os, 'windows')
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      shell: cmd
      run: |
        cd test
        call "%ProgramW6432%\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" amd64
        cmake -B BUILD -DCMAKE_BUILD_TYPE=Release -G Ninja -DCMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=cl
        cd ..\GiraffeChess
        cmake -B BUILD -DCMAKE_BUILD_TYPE=Release -G Ninja -DCMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=cl

    - name: Configure CMake
      if: "!startsWith(matrix.os, 'windows')"
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cd test
        cmake -B BUILD -DCMAKE_BUILD_TYPE=Release -G Ninja
        cd ../GiraffeChess
        cmake -B BUILD -DCMAKE_BUILD_TYPE=Release -G Ninja

    - name: Build main
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: |
        cd GiraffeChess
        cmake --build BUILD --config Release -j

    - name: Build test
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: |
        cd test
        cmake --build BUILD --config Release -j

    - name: Run test
      run: |
        cd ../bin/
        ls
        ./test

